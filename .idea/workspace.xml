<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="115e7ba0-a16b-4688-bf9d-b9c5729cf93b" name="Default Changelist" comment="" />
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="isMigrated" value="true" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="90">
              <caret line="6" column="48" selection-start-line="6" selection-start-column="48" selection-end-line="6" selection-end-column="48" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/b/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="936">
              <caret line="83" selection-start-line="83" selection-end-line="83" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/accounts.json">
          <provider selected="true" editor-type-id="text-editor">
            <state>
              <caret selection-end-column="112" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/accounts.json" />
        <option value="$PROJECT_DIR$/src/b/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" fullScreen="true">
    <option name="width" value="1680" />
    <option name="height" value="1050" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="b" type="b2602c69:ProjectViewProjectNode" />
              <item name="b" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="b" type="b2602c69:ProjectViewProjectNode" />
              <item name="b" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
  </component>
  <component name="ReplState" timestamp="1563303799346">{:repl-history {:ide [], :local [{:command &quot;(defn filter-by-args [parameters]\n  (tree-seq map? vals db))&quot;, :offset 60, :ns &quot;b.core&quot;} {:command &quot;(filter-by-args :accounts)&quot;, :offset 26, :ns &quot;b.core&quot;} {:command &quot;(defn filter-by-args [parameters]\n  (tree-seq map? vals parameters))&quot;, :offset 68, :ns &quot;b.core&quot;} {:command &quot;(map filter-by-args db)&quot;, :offset 23, :ns &quot;b.core&quot;} {:command &quot;(tree-seq map? vals {:a {:c \&quot;d\&quot;}})&quot;, :offset 34, :ns &quot;b.core&quot;} {:command &quot;(defn transaction-history [account-number]\n  (filter #(= account-number (:account-number %)) db))&quot;, :offset 97, :ns &quot;b.core&quot;} {:command &quot;(defn transaction-history [account-number]\n  (first (filter #(= account-number (:account-number %)) db)))&quot;, :offset 105, :ns &quot;b.core&quot;} {:command &quot;(transaction-history 456)&quot;, :offset 25, :ns &quot;b.core&quot;} {:command &quot;(transaction-history 123)&quot;, :offset 25, :ns &quot;b.core&quot;} {:command &quot;(defn account [account-number]\n  (first (filter #(= account-number (:account-number %)) db)))&quot;, :offset 93, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account [account-number]\n  (first (filter #(= \&quot;saving\&quot; (:type %)) (:accounts (account account-number)))))&quot;, :offset 118, :ns &quot;b.core&quot;} {:command &quot;(saving-account 123)&quot;, :offset 20, :ns &quot;b.core&quot;} {:command &quot;(defn filter-by-args [parameters]\n  (map #(select-keys % parameters) db))&quot;, :offset 73, :ns &quot;b.core&quot;} {:command &quot;(defn is-valid-account [input]\n  (not (empty? (filter #(= input %) (filter-by-args (keys input))))))&quot;, :offset 100, :ns &quot;b.core&quot;} {:command &quot;(is-valid-account {:account-number 123 :password \&quot;123\&quot;} )&quot;, :offset 57, :ns &quot;b.core&quot;} {:command &quot;(is-valid-account {:username 123 :password \&quot;123\&quot;} )&quot;, :offset 51, :ns &quot;b.core&quot;} {:command &quot;(is-valid-account {:username \&quot;kanishk\&quot; :password \&quot;123\&quot;} )&quot;, :offset 57, :ns &quot;b.core&quot;} {:command &quot;(for [i [1 2 3 4 5]]\n  (inc i))&quot;, :offset 31, :ns &quot;b.core&quot;} {:command &quot;(for [i [1 2 3 4 5]\n      :when (even? i)]\n  (inc i))&quot;, :offset 53, :ns &quot;b.core&quot;} {:command &quot;(transaction 123)&quot;, :offset 17, :ns &quot;b.core&quot;} {:command &quot;(transactions 123)&quot;, :offset 18, :ns &quot;b.core&quot;} {:command &quot;(defn transactions [account-number]\n  (:transactions (saving-account account-number)))&quot;, :offset 86, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs]\n  (let [valid-account (is-valid-account inputs)]\n    (print valid-account)\n    (transactions valid-account)))&quot;, :offset 130, :ns &quot;b.core&quot;} {:command &quot;(saving-account {:account-number 123,\n                 :username \&quot;kanishk\&quot;,\n                 :password \&quot;123\&quot;,\n                 :accounts [{:type \&quot;saving\&quot;, :balance 123, :transactions [{:credit 10, :new-balance 133}]}\n                            {:type \&quot;current\&quot;, :balance 24, :transactions [{:credit 10, :new-balance 144}]}]}\n                )&quot;, :offset 343, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account [account]\n  (print account)\n  (first (filter #(= \&quot;saving\&quot; (:type %))\n                 (:accounts account))))&quot;, :offset 129, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account [account]\n  (print (:accounts account))\n  (first (filter #(= \&quot;saving\&quot; (:type %))\n                 (:accounts account))))&quot;, :offset 141, :ns &quot;b.core&quot;} {:command &quot;(defn transactions [account]\n  (:transactions (saving-account account)))&quot;, :offset 72, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs]\n  (let [valid-account (is-valid-account inputs)]\n    (transactions valid-account)))&quot;, :offset 104, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs]\n  (let [valid-account (is-valid-account inputs)]\n    (saving-account-transactions valid-account)))&quot;, :offset 119, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;123kanishk\&quot; :password \&quot;123\&quot;})&quot;, :offset 48, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;123kanishk\&quot; :password \&quot;123\&quot; :account-type \&quot;saving\&quot;})&quot;, :offset 71, :ns &quot;b.core&quot;} {:command &quot;(defn current-account-transaction [account]\n  (print \&quot;hello\&quot;)\n  (:transactions (current-account account)))&quot;, :offset 106, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:account-type inputs)\n      \&quot;saving\&quot; (saving-account-transactions valid-account))\n      \&quot;current\&quot; (current-account-transaction valid-account)))&quot;, :offset 224, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;kanishk\&quot; :password \&quot;123\&quot; :account-type \&quot;saving\&quot;})&quot;, :offset 68, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (print (:account-type type))\n    (case (:account-type type)\n      \&quot;saving\&quot; (saving-account-transactions valid-account))\n      \&quot;current\&quot; (current-account-transaction valid-account)))&quot;, :offset 260, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:account-type type)\n      \&quot;saving\&quot; (orint \&quot;As\&quot;))\n    \&quot;current\&quot; (current-account-transaction valid-account)))&quot;, :offset 194, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:account-type type)\n      \&quot;saving\&quot; (print \&quot;As\&quot;))\n    \&quot;current\&quot; (current-account-transaction valid-account)))&quot;, :offset 194, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account-transactions [account]\n  (print 13)\n  (:transactions (saving-account account)))&quot;, :offset 100, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account [account]\n  (print 12)\n  (first (filter #(= \&quot;saving\&quot; (:type %))\n                 (:accounts account))))&quot;, :offset 124, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:account-type type)\n      \&quot;saving\&quot; (saving-account-transactions valid-account))\n      \&quot;current\&quot; (current-account-transaction valid-account)))&quot;, :offset 227, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;kanishk\&quot; :password \&quot;123123\&quot;} {:account-type \&quot;saving\&quot;})&quot;, :offset 73, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (saving-account-transactions valid-account)\n    (case (:account-type type)\n      \&quot;saving\&quot; (saving-account-transactions valid-account)\n      \&quot;current\&quot; (current-account-transaction valid-account))\n        ))&quot;, :offset 284, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;kanishk123\&quot; :password \&quot;123\&quot;} {:account-type \&quot;saving\&quot;})&quot;, :offset 73, :ns &quot;b.core&quot;} {:command &quot;(defn current-account [account]\n  (print 123123)\n  (filter #(= \&quot;current\&quot; (:type %) )\n          (:accounts account)))&quot;, :offset 116, :ns &quot;b.core&quot;} {:command &quot;(defn current-account-transaction [account]\n  (print 123)\n  (:transactions (current-account account)))&quot;, :offset 102, :ns &quot;b.core&quot;} {:command &quot;(defn current-account-transaction [account]\n  (:transactions (current-account account)))&quot;, :offset 88, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (saving-account-transactions valid-account)\n    (case (:account-type type)\n      \&quot;saving\&quot; (saving-account-transactions valid-account)\n      \&quot;current\&quot; (current-account-transaction valid-account))))&quot;, :offset 275, :ns &quot;b.core&quot;} {:command &quot;(defn current-account-transactions [account]\n  (print 123)\n  (:transactions (current-account account)))&quot;, :offset 103, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (saving-account-transactions valid-account)\n    (case (:account-type type)\n      \&quot;saving\&quot; (saving-account-transactions valid-account)\n      \&quot;current\&quot; (print (current-account-transactions valid-account)))))&quot;, :offset 284, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account-transactions [account]\n  (print 42)\n  (:transactions (saving-account account)))&quot;, :offset 100, :ns &quot;b.core&quot;} {:command &quot;(defn current-account-transactions [account]\n  (print \&quot;asd\&quot;)\n  (:transactions (current-account account)))&quot;, :offset 105, :ns &quot;b.core&quot;} {:command &quot;(defn current-account [account]\n  (print 42)\n  (filter #(= \&quot;current\&quot; (:type %) )\n          (:accounts account)))&quot;, :offset 112, :ns &quot;b.core&quot;} {:command &quot;(defn current-account [account]\n  (filter #(= \&quot;current\&quot; (:type %) )\n          (:accounts account)))&quot;, :offset 99, :ns &quot;b.core&quot;} {:command &quot;(defn current-account [account]\n  (first (filter #(= \&quot;current\&quot; (:type %))\n           (:accounts account))))&quot;, :offset 107, :ns &quot;b.core&quot;} {:command &quot;(is-valid-account {:username \&quot;kanishk\&quot; :password \&quot;123\&quot;})&quot;, :offset 56, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account [account]\n    (first (filter #(= \&quot;saving\&quot; (:type %))\n                   (:accounts account))))\n  \n  (defn current-account [account]\n    (first (filter #(= \&quot;current\&quot; (:type %))\n                   (:accounts account))))\n  \n  (defn saving-account-transactions [account]\n    (:transactions (saving-account account)))\n  \n  (defn current-account-transactions [account]\n    (:transactions (current-account account)))\n  \n  (defn login [inputs type]\n    (let [valid-account (is-valid-account inputs)]\n      (saving-account-transactions valid-account)\n      (case (:account-type type)\n        \&quot;saving\&quot; (saving-account-transactions valid-account)\n        \&quot;current\&quot; (current-account-transactions valid-account))))&quot;, :offset 722, :ns &quot;b.core&quot;} {:command &quot;(ns b.core\n  (:require [clojure.data.json :as json]))&quot;, :offset 53, :ns &quot;nil&quot;} {:command &quot;(defn is-valid-account [input]\n  (first\n    (let [given-keys (keys input)]\n      (for [account db\n            :let [found (select-keys account given-keys)]\n            :when (= input found)]\n        account))))&quot;, :offset 210, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account [account]\n  (first (filter #(= \&quot;saving\&quot; (:type %))\n                 (:accounts account))))&quot;, :offset 111, :ns &quot;b.core&quot;} {:command &quot;(defn current-account [account]\n  (first (filter #(= \&quot;current\&quot; (:type %))\n                 (:accounts account))))&quot;, :offset 113, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account-transactions [account]\n  (:transactions (saving-account account)))&quot;, :offset 87, :ns &quot;b.core&quot;} {:command &quot;(defn current-account-transactions [account]\n  (:transactions (current-account account)))&quot;, :offset 89, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (saving-account-transactions valid-account)\n    (case (:account-type type)\n      \&quot;saving\&quot; (saving-account-transactions valid-account)\n      \&quot;current\&quot; (current-account-transactions valid-account))))&quot;, :offset 276, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;kanishk\&quot; :password \&quot;123\&quot;} {:account-type \&quot;current\&quot;})&quot;, :offset 71, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;kanishk\&quot; :password \&quot;123\&quot;} {:account-type \&quot;sa\&quot;})&quot;, :offset 66, :ns &quot;b.core&quot;} {:command &quot;(long (rand n))&quot;, :offset 15, :ns &quot;b.core&quot;} {:command &quot;(long (rand 2))&quot;, :offset 15, :ns &quot;b.core&quot;} {:command &quot;(take 30(repeatedly (rand-int 20)))&quot;, :offset 35, :ns &quot;b.core&quot;} {:command &quot;(take 20(repeatedly (rand-int 20)))&quot;, :offset 35, :ns &quot;b.core&quot;} {:command &quot;(take 1(repeatedly (rand-int 20)))&quot;, :offset 34, :ns &quot;b.core&quot;} {:command &quot;(rand-int 20)&quot;, :offset 13, :ns &quot;b.core&quot;} {:command &quot;(take 1(repeatedly #(rand-int 20)))&quot;, :offset 35, :ns &quot;b.core&quot;} {:command &quot;(take 20(repeatedly #(rand-int 20)))&quot;, :offset 36, :ns &quot;b.core&quot;} {:command &quot;(set (take 20 (repeatedly #(rand-int 20))))&quot;, :offset 43, :ns &quot;b.core&quot;} {:command &quot;(reduce str \&quot;\&quot; (set (take 20 (repeatedly #(rand-int 20)))))&quot;, :offset 59, :ns &quot;b.core&quot;} {:command &quot;(reduce str \&quot;-\&quot; (set (take 20 (repeatedly #(rand-int 20)))))&quot;, :offset 60, :ns &quot;b.core&quot;} {:command &quot;(reduce str (set (take 20 (repeatedly #(rand-int 20)))))&quot;, :offset 56, :ns &quot;b.core&quot;} {:command &quot;(reduce str (set (take 6 (repeatedly #(rand-int 6)))))&quot;, :offset 54, :ns &quot;b.core&quot;} {:command &quot;(reduce str (set (take 6 (repeatedly #(rand-int 20)))))&quot;, :offset 55, :ns &quot;b.core&quot;} {:command &quot;(reduce str (set (take 6 (repeatedly #(rand-int 9)))))&quot;, :offset 54, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number] (reduce str (set (take 6 (repeatedly #(rand-int 9)))))\n                        {\n                         :account-number account-number\n                         :username (:username account)\n                         :password (:password account)\n                         }))&quot;, :offset 347, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number] (reduce str (set (take 6 (repeatedly #(rand-int 9)))))\n                        ({\n                          :account-number account-number\n                          :username       (:username account)\n                          :password       (:password account)\n                          })))&quot;, :offset 365, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number] (reduce str (set (take 6 (repeatedly #(rand-int 9)))))\n                        (hash-map :account-number account-number\n                                  :username       (:username account)\n                                  :password       (:password account))))&quot;, :offset 334, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number] (reduce str (set (take 6 (repeatedly #(rand-int 9)))))\n                        (hash-map :account-number account-number :username (:username account) :password (:password account))))&quot;, :offset 254, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number] (reduce str (set (take 6 (repeatedly #(rand-int 9)))))\n                        (hash-map :account-number account-number)))&quot;, :offset 194, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number (reduce str (set (take 6 (repeatedly #(rand-int 9)))))] \n          (hash-map :account-number account-number :username (:username account):password (:password account))))&quot;, :offset 240, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number (reduce str (set (take 6 (repeatedly #(rand-int 9)))))] \n          (hash-map :account-number account-number \n                    :username (:username account)\n                    :password (:password account)\n                    :accounts [:transactions []]\n                    )))&quot;, :offset 352, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number (reduce str (set (take 6 (repeatedly #(rand-int 9)))))] \n          (hash-map :account-number account-number \n                    :username (:username account)\n                    :password (:password account)\n                    :accounts [hash-map (:transactions [])]\n                    )))&quot;, :offset 363, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number (reduce str (set (take 6 (repeatedly #(rand-int 9)))))] \n          (hash-map :account-number account-number \n                    :username (:username account)\n                    :password (:password account)\n                    :accounts [(hash-map (:transactions []))]\n                    )))&quot;, :offset 365, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number (reduce str (set (take 6 (repeatedly #(rand-int 9)))))] \n          (hash-map :account-number account-number \n                    :username (:username account)\n                    :password (:password account)\n                    :accounts [(hash-map (:transactions [(hash-map)]))]\n                    )))&quot;, :offset 375, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number (reduce str (set (take 6 (repeatedly #(rand-int 9)))))] \n          (hash-map :account-number account-number \n                    :username (:username account)\n                    :password (:password account)\n                    :accounts (vector (hash-map :transaction))\n                    )))&quot;, :offset 366, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number (reduce str (set (take 6 (repeatedly #(rand-int 9)))))] \n          (hash-map :account-number account-number \n                    :username (:username account)\n                    :password (:password account)\n                    :accounts (vector (hash-map :transaction []))\n                    )))&quot;, :offset 369, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number (reduce str (set (take 6 (repeatedly #(rand-int 9)))))]\n          (hash-map :account-number account-number\n                    :username (:username account)\n                    :password (:password account)\n                    :accounts (vector (hash-map :transaction [] :type \&quot;saving\&quot;))\n                    )))&quot;, :offset 382, :ns &quot;b.core&quot;} {:command &quot;(defn prepare-registration-attributes [account]\n  (let [account-number (reduce str (set (take 6 (repeatedly #(rand-int 9)))))]\n          (hash-map :account-number account-number\n                    :username (:username account)\n                    :password (:password account)\n                    :accounts (vector (hash-map :transactions [] :type \&quot;saving\&quot;))\n                    )))&quot;, :offset 383, :ns &quot;b.core&quot;} {:command &quot;(defn register-account [account]\n  (spit \&quot;src/accounts.json\&quot; (json/write-str (prepare-registration-attributes account))))&quot;, :offset 121, :ns &quot;b.core&quot;} {:command &quot;(register-account {:username \&quot;kanishk\&quot; :password \&quot;123\&quot;})&quot;, :offset 56, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;kanishk\&quot; :password \&quot;123\&quot;})&quot;, :offset 45, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;kanishk\&quot; :password \&quot;123\&quot;} {:type \&quot;saving\&quot;})&quot;, :offset 62, :ns &quot;b.core&quot;} {:command &quot;(def db (json/read-str (slurp \&quot;src/accounts.json\&quot;) :key-fn keyword))&quot;, :offset 68, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;kanishk\&quot; :password \&quot;123\&quot;} {:account-type \&quot;saving\&quot;})&quot;, :offset 70, :ns &quot;b.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL for b">
    <configuration name="REPL for b" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="b" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="b" />
      <setting name="path" value="$PROJECT_DIR$/src/b/core.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/b" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for b" />
        <item itemvalue="Clojure Application.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="115e7ba0-a16b-4688-bf9d-b9c5729cf93b" name="Default Changelist" comment="" />
      <created>1562928984522</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1562928984522</updated>
      <workItem from="1562928991233" duration="1702000" />
      <workItem from="1562956109680" duration="2651000" />
      <workItem from="1563078580651" duration="11040000" />
      <workItem from="1563208692746" duration="4888000" />
      <workItem from="1563297135957" duration="4941000" />
    </task>
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="25222000" />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="0" width="1680" height="1050" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.13614164" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32960895" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Docker" order="7" show_stripe_button="false" />
      <window_info anchor="bottom" id="Version Control" order="8" />
      <window_info anchor="bottom" id="Database Changes" order="9" />
      <window_info anchor="bottom" id="Terminal" order="10" />
      <window_info anchor="bottom" id="Event Log" order="11" side_tool="true" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="REPL" order="4" sideWeight="0.84591836" side_tool="true" visible="true" weight="0.27106228" />
      <window_info anchor="right" id="Maven" order="5" />
      <window_info anchor="right" id="Leiningen" order="6" sideWeight="0.15408163" visible="true" weight="0.27106228" />
      <window_info anchor="right" id="Database" order="7" />
      <window_info anchor="right" id="Palette&#9;" order="8" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="90">
          <caret line="6" column="48" selection-start-line="6" selection-start-column="48" selection-end-line="6" selection-end-column="48" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/accounts.json">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret selection-end-column="112" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/b/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="936">
          <caret line="83" selection-start-line="83" selection-end-line="83" />
        </state>
      </provider>
    </entry>
  </component>
</project>