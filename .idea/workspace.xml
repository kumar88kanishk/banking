<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="115e7ba0-a16b-4688-bf9d-b9c5729cf93b" name="Default Changelist" comment="Buggy Code">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/resources/users.json" beforeDir="false" afterPath="$PROJECT_DIR$/resources/users.json" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/accounts.json" beforeDir="false" afterPath="$PROJECT_DIR$/src/accounts.json" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/b/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/b/core.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="isMigrated" value="true" />
  </component>
  <component name="FileEditorManager">
    <splitter split-orientation="horizontal" split-proportion="0.5">
      <split-first>
        <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/project.clj">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="120">
                  <caret line="6" column="48" selection-start-line="6" selection-start-column="48" selection-end-line="6" selection-end-column="48" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="true">
            <entry file="file://$PROJECT_DIR$/src/b/core.clj">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="190">
                  <caret line="47" column="71" lean-forward="true" selection-start-line="47" selection-start-column="71" selection-end-line="47" selection-end-column="71" />
                </state>
              </provider>
            </entry>
          </file>
        </leaf>
      </split-first>
      <split-second>
        <leaf>
          <file pinned="false" current-in-tab="true">
            <entry file="file://$PROJECT_DIR$/resources/users.json">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="240">
                  <caret line="12" column="17" selection-start-line="12" selection-start-column="17" selection-end-line="12" selection-end-column="17" />
                </state>
              </provider>
            </entry>
          </file>
        </leaf>
      </split-second>
    </splitter>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>db</find>
      <find>print</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/accounts.json" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/resources/users.json" />
        <option value="$PROJECT_DIR$/src/b/core.clj" />
      </list>
    </option>
  </component>
  <component name="MavenProjectNavigator">
    <treeState>
      <expand />
      <select />
    </treeState>
  </component>
  <component name="ProjectFrameBounds" fullScreen="true">
    <option name="width" value="1680" />
    <option name="height" value="1050" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="b" type="b2602c69:ProjectViewProjectNode" />
              <item name="b" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="b" type="b2602c69:ProjectViewProjectNode" />
              <item name="b" type="462c0819:PsiDirectoryNode" />
              <item name="resources" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="settings.editor.selected.configurable" value="preferences.lookFeel" />
  </component>
  <component name="ReplState" timestamp="1563996893408">{:repl-history {:ide [], :local [{:command &quot;(defn is-valid-account [input]\n  (first\n    (let [given-keys (keys input)]\n      (for [account (db)\n          :let [found (select-keys account given-keys)]\n          :when (= input found)]\n        \n        (print account)))))&quot;, :offset 225, :ns &quot;b.core&quot;} {:command &quot;(defn is-valid-account [input]\n  (first\n    (let [given-keys (keys input)]\n      (for [account (db)\n          :let [found (select-keys account given-keys)]\n          :when (= input found)]\n\n        (print account)))))&quot;, :offset 217, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (print valid-account)\n    (case (:account-type type)\n      \&quot;saving\&quot; (saving-account-transactions valid-account)\n      \&quot;current\&quot; (current-account-transactions valid-account))))&quot;, :offset 254, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (print (:account-type type))\n    (case (:account-type type)\n      \&quot;saving\&quot; (saving-account-transactions valid-account)\n      \&quot;current\&quot; (current-account-transactions valid-account))))&quot;, :offset 261, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account-transactions [account]\n  (print \&quot;saving-account-transaction\&quot; account)\n  (:transactions (saving-account account)))&quot;, :offset 134, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account [account]\n  (print \&quot;saving-account\&quot; account)\n  (first (filter #(= \&quot;saving\&quot; (:type %))\n                 (:accounts account))))&quot;, :offset 146, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account [account]\n  (print \&quot;saving-account\&quot; account)\n  (print (filter #(= \&quot;saving\&quot; (:type %))\n                 (:accounts account))))&quot;, :offset 146, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account [account]\n  (print\n    (first (filter #(= \&quot;saving\&quot; (:type %))\n                   (:accounts account)))))&quot;, :offset 125, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;kanishk3333\&quot; :password \&quot;123\&quot;} {:account-type \&quot;saving\&quot;})&quot;, :offset 74, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account-transactions [account]\n  (:transactions (saving-account account)))&quot;, :offset 87, :ns &quot;b.core&quot;} {:command &quot;(defn current-account-transactions [account]\n  (:transactions (current-account account)))&quot;, :offset 89, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account-last-transaction [account]\n  (or (last (saving-account-transactions account)) {}))&quot;, :offset 103, :ns &quot;b.core&quot;} {:command &quot;(defn current-account-last-transaction [account]\n  (or (last (current-account-transactions account)) {}))&quot;, :offset 105, :ns &quot;b.core&quot;} {:command &quot;(defn merge-transactions [transaction new-balance old-balance]\n  (conj transaction (hash-map :new-balance new-balance :old-balance old-balance)))&quot;, :offset 145, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (print valid-account)\n    (case (:action type)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (saving-account-last-transaction valid-account) (:amount type))]\n                             (let [new-transaction (merge-transactions (saving-account-transactions valid-account) new-balance (last-balance valid-account))]\n                               (refresh-account (saving-account-transactions valid-account) new-transaction))))\n      \&quot;debit-in-saving\&quot; (debit  (saving-account-last-transaction valid-account ) (:amount type))\n      \&quot;credit-in-current\&quot; (credit (current-account-last-transaction valid-account ) (:amount type))\n      \&quot;debit-in-current\&quot; (debit (current-account-last-transaction valid-account ) (:amount type)))))&quot;, :offset 843, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:account-type type)\n      \&quot;saving\&quot; (saving-account-transactions valid-account)\n      \&quot;current\&quot; (current-account-transactions valid-account))))&quot;, :offset 228, :ns &quot;b.core&quot;} {:command &quot;(conj {:a \&quot;b\&quot; :c [{:a \&quot;b\&quot;}]} {:a \&quot;c\&quot;})&quot;, :offset 38, :ns &quot;b.core&quot;} {:command &quot;(conj {:a \&quot;b\&quot; :c [{:a \&quot;b\&quot;}]} {:c [{:b \&quot;x\&quot;}]})&quot;, :offset 45, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (print valid-account)\n    (case (:action type)\n      \&quot;credit-in-saving\&quot; (credit (last-transaction (saving-account valid-account)) (:amount type))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount type))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount type))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount type)))))&quot;, :offset 528, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:account-type type)\n      \&quot;saving\&quot; (saving-account valid-account)\n      \&quot;current\&quot; (current-account valid-account))))&quot;, :offset 202, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action type)\n      \&quot;credit-in-saving\&quot; (credit (last-transaction (saving-account valid-account)) (:amount type))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount type))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount type))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount type)))))&quot;, :offset 502, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [account new-transactions]\n  (conj (:accounts account) new-transactions))&quot;, :offset 95, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action type)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-account)) (:amount action))]\n                             (let [new-transaction (new-transaction :amount action \&quot;credit\&quot; new-balance )]\n                               (let [merge-transactions (merge-transactions (transactions valid-account) new-transaction)]\n                                 (let refresh-account valid-account merge-transactions)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount action)))))&quot;, :offset 884, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action type)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-account)) (:amount action))]\n                             (let [new-transaction (new-transaction :amount action \&quot;credit\&quot; new-balance )]\n                               (let [merge-transactions (merge-transactions (transactions valid-account) new-transaction)]\n                                 (let [updated-account (refresh-account valid-account merge-transactions)])))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount action)))))&quot;, :offset 904, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-account)) (:amount action))]\n                             (let [new-transaction (new-transaction :amount action \&quot;credit\&quot; new-balance )]\n                               (let [merge-transactions (merge-transactions (transactions valid-account) new-transaction)]\n                                 (let [updated-account (refresh-account valid-account merge-transactions)])))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount action)))))&quot;, :offset 906, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-account)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions valid-account) new-transaction)]\n                                 (let [updated-account (refresh-account valid-account merge-transactions)])))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount action)))))&quot;, :offset 907, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-account)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions valid-account) new-transaction)]\n                                 (let [updated-account (refresh-account valid-account merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount action)))))&quot;, :offset 958, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-account)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions valid-account) new-transaction)]\n                                 (print merge-transactions)\n                                 (let [updated-account (refresh-account valid-account merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount action)))))&quot;, :offset 1018, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-account)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions valid-account) new-transaction)]\n                                 (print merge-transactions \&quot;1123123\&quot;)\n                                 (let [updated-account (refresh-account valid-account merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount action)))))&quot;, :offset 1028, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-account)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-account)) new-transaction)]\n                                 (print merge-transactions \&quot;1123123\&quot;)\n                                 (let [updated-account (refresh-account valid-account merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount action)))))&quot;, :offset 1045, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-account)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-account)) new-transaction)]\n                                 (let [updated-account (refresh-account valid-account merge-transactions)]\n                                   )))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount action)))))&quot;, :offset 960, :ns &quot;b.core&quot;} {:command &quot;updated-account&quot;, :offset 15, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [account new-transactions]\n  (conj (:accounts account) (hash-map :transactions new-transactions)))&quot;, :offset 120, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-account)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-account)) new-transaction)]\n                                 (let [updated-account (refresh-account valid-account merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount action)))))&quot;, :offset 975, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [account new-transactions]\n  (assoc (:accounts account) (:transactions new-transactions)))&quot;, :offset 112, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [account new-transactions]\n  (assoc (:accounts account) :transactions new-transactions))&quot;, :offset 110, :ns &quot;b.core&quot;} {:command &quot;(assoc [1 2 3] 1)&quot;, :offset 17, :ns &quot;b.core&quot;} {:command &quot;(assoc [1 2 3] 1 0)&quot;, :offset 19, :ns &quot;b.core&quot;} {:command &quot;(.indexOf (db) {:type \&quot;saving\&quot;, :transactions [{:type \&quot;credit\&quot;, :amount 123, :balance 123} {:amount 12, :type \&quot;credit\&quot;, :balance 12}]})&quot;, :offset 135, :ns &quot;b.core&quot;} {:command &quot;(.indexOf (db) {:type \&quot;saving\&quot;, :transactions [{:type \&quot;credit\&quot;, :amount 123, :balance 123}]})&quot;, :offset 93, :ns &quot;b.core&quot;} {:command &quot;(.indexOf (db) {:type \&quot;saving\&quot;, :transactions [{:type \&quot;credit\&quot;, :amount 123, :balance 123}] :password \&quot;123\&quot; :username \&quot;kanishk\&quot; :account-number \&quot;07435\&quot;})&quot;, :offset 153, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    ))&quot;, :offset 81, :ns &quot;b.core&quot;} {:command &quot;(.indexOf (db) {:password \&quot;123\&quot;,\n                :username \&quot;kanishk\&quot;,\n                :accounts [{:type \&quot;saving\&quot;, :transactions [{:type \&quot;credit\&quot;, :amount 123, :balance 123}]}],\n                :account-number \&quot;07435\&quot;})&quot;, :offset 218, :ns &quot;b.core&quot;} {:command &quot;(.indexOf (db) {:account-number \&quot;07435\&quot;,\n                :password \&quot;123\&quot;,\n                :username \&quot;kanishk\&quot;,\n                :accounts [{:type \&quot;saving\&quot;, :transactions [{:type \&quot;credit\&quot;, :amount 123, :balance 123}]}],\n                })&quot;, :offset 236, :ns &quot;b.core&quot;} {:command &quot;(assoc [1 2 3] 1 3)&quot;, :offset 19, :ns &quot;b.core&quot;} {:command &quot;(assoc [1 2 3] 1 2)&quot;, :offset 19, :ns &quot;b.core&quot;} {:command &quot;(assoc [\&quot;a\&quot; \&quot;b\&quot; \&quot;c\&quot;] 1 2)&quot;, :offset 25, :ns &quot;b.core&quot;} {:command &quot;(ns b.core\n  (:require [clojure.data.json :as json]))&quot;, :offset 53, :ns &quot;b.core&quot;} {:command &quot;(defn db [] (json/read-str (slurp \&quot;resources/users.json\&quot;) :key-fn keyword))&quot;, :offset 75, :ns &quot;b.core&quot;} {:command &quot;(defn is-valid-account [input]\n  (first\n    (let [given-keys (keys input)]\n      (for [account (db)\n          :let [found (select-keys account given-keys)]\n          :when (= input found)]\n\n        account))))&quot;, :offset 209, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account [account]\n  (first (filter #(= \&quot;saving\&quot; (:type %))\n                 (:accounts account))))&quot;, :offset 111, :ns &quot;b.core&quot;} {:command &quot;(defn current-account [account]\n  (first (filter #(= \&quot;current\&quot; (:type %))\n                 (:accounts account))))&quot;, :offset 113, :ns &quot;b.core&quot;} {:command &quot;(defn last-transaction [transactions]\n  (or (last transactions) {}))&quot;, :offset 68, :ns &quot;b.core&quot;} {:command &quot;(defn last-balance [transaction]\n  (or (:balance transaction) 0))&quot;, :offset 65, :ns &quot;b.core&quot;} {:command &quot;(defn credit [account amount]\n  (let [last-balance (last-balance account)]\n    (+ last-balance amount)))&quot;, :offset 104, :ns &quot;b.core&quot;} {:command &quot;(defn debit [account amount]\n  (let [last-balance (last-balance account)]\n    (- last-balance amount)))&quot;, :offset 103, :ns &quot;b.core&quot;} {:command &quot;(defn merge-transactions [transaction new-transaction]\n  (conj transaction new-transaction))&quot;, :offset 92, :ns &quot;b.core&quot;} {:command &quot;(defn new-transaction [amount type balance]\n  (hash-map :type type :balance balance :amount amount))&quot;, :offset 100, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [account new-transactions]\n  (assoc account :transactions new-transactions))&quot;, :offset 98, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-account (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-account)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-account)) new-transaction)]\n                                 (let [updated-account (refresh-account (saving-account valid-account) merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-account)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-account)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-account)) (:amount action)))))&quot;, :offset 992, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs type]\n  (let [valid-account (is-valid-account inputs)]\n    valid-account))&quot;, :offset 94, :ns &quot;b.core&quot;} {:command &quot;(defn saving-account [user]\n  (first (filter #(= \&quot;saving\&quot; (:type %))\n                 (:accounts user))))&quot;, :offset 105, :ns &quot;b.core&quot;} {:command &quot;(defn current-account [user]\n  (first (filter #(= \&quot;current\&quot; (:type %))\n                 (:accounts user))))&quot;, :offset 107, :ns &quot;b.core&quot;} {:command &quot;(defn transactions [account]\n  (:transactions account))&quot;, :offset 55, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-user (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-user)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-user)) new-transaction)]\n                                 (let [updated-account (refresh-account (saving-account valid-user) merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-user)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-user)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-user)) (:amount action)))))&quot;, :offset 971, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-user (is-valid-account inputs)]\n    (print (saving-account valid-user))\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-user)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-user)) new-transaction)]\n                                 (let [updated-account (refresh-account (saving-account valid-user) merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-user)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-user)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-user)) (:amount action)))))&quot;, :offset 1011, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-user (is-valid-account inputs)]\n    (print (last-transaction (saving-account valid-user)))\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-user)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-user)) new-transaction)]\n                                 (let [updated-account (refresh-account (saving-account valid-user) merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-user)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-user)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-user)) (:amount action)))))&quot;, :offset 1030, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-user (is-valid-account inputs)]\n    (print (last-transaction (transactions (saving-account valid-user))))\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (saving-account valid-user)) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-user)) new-transaction)]\n                                 (let [updated-account (refresh-account (saving-account valid-user) merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-user)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-user)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-user)) (:amount action)))))&quot;, :offset 1045, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-user (is-valid-account inputs)]\n    (print (last-transaction (transactions (saving-account valid-user))))\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (transactions (last-transaction (saving-account valid-user))) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-user)) new-transaction)]\n                                 (let [updated-account (refresh-account (saving-account valid-user) merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-user)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-user)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-user)) (:amount action)))))&quot;, :offset 1060, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-user (is-valid-account inputs)]\n    (print (last-transaction (transactions (saving-account valid-user))))\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (transactions (saving-account valid-user))) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-user)) new-transaction)]\n                                 (let [updated-account (refresh-account (saving-account valid-user) merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-user)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-user)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-user)) (:amount action)))))&quot;, :offset 1060, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;kanishk\&quot; :password \&quot;123\&quot;} {:account-type \&quot;saving\&quot;})&quot;, :offset 70, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [user account new-transactions]\n  (assoc user :accounts (assoc account :transactions new-transactions)))&quot;, :offset 126, :ns &quot;b.core&quot;} {:command &quot;(assoc [\&quot;a\&quot; \&quot;b\&quot; \&quot;c\&quot;] 0 2)&quot;, :offset 25, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [user account new-transactions]\n  (assoc user  0 :accounts (assoc account :transactions new-transactions)))&quot;, :offset 129, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [user account new-transactions]\n  (assoc user  0 (hash-map :accounts (assoc account :transactions new-transactions))))&quot;, :offset 140, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [user account new-transactions]\n  (assoc user 0 :accounts (assoc account :transactions new-transactions)))&quot;, :offset 128, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [user account new-transactions]\n  (assoc user 0 1))&quot;, :offset 73, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [user account new-transactions]\n  (assoc (db) 0 1))&quot;, :offset 73, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ account new-transactions]\n  (assoc (db) 0 :accounts (assoc account :transactions new-transactions)))&quot;, :offset 124, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-user (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (transactions (saving-account valid-user))) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-user)) new-transaction)]\n                                 (let [updated-account (refresh-account (saving-account valid-user) merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-user)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-user)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-user)) (:amount action)))))&quot;, :offset 986, :ns &quot;b.core&quot;} {:command &quot;(defn login [inputs]\n  (let [valid-user (is-valid-account inputs)]\n    valid-user))&quot;, :offset 83, :ns &quot;b.core&quot;} {:command &quot;(login {:username \&quot;kanishk\&quot; :password \&quot;123\&quot;})&quot;, :offset 45, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ account new-transactions]\n  (assoc (db) 0 (hash-map :accounts (assoc account :transactions new-transactions))))&quot;, :offset 135, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ account new-transactions]\n  (assoc (db) 0 (hash-map :accounts (assoc [] :transactions new-transactions))))&quot;, :offset 130, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ account new-transactions]\n  (assoc account :transactions new-transactions))&quot;, :offset 99, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ account new-transactions]\n  (let ) (assoc account :transactions new-transactions))&quot;, :offset 106, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ user account new-transactions]\n  (let [updated-account (assoc account :transactions new-transactions)]\n    (let [account-index] (.indexOf (:accounts user) account))))&quot;, :offset 190, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ user account new-transactions]\n  (let [updated-account (assoc account :transactions new-transactions)]\n    (let [account-index (.indexOf (:accounts user) account)])))&quot;, :offset 190, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-user (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (transactions (saving-account valid-user))) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-user)) new-transaction)]\n                                 (let [updated-account (refresh-account valid-user (saving-account valid-user) merge-transactions)]\n                                   updated-account)))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-user)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-user)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-user)) (:amount action)))))&quot;, :offset 997, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ user account new-transactions]\n  (let [updated-account (assoc account :transactions new-transactions)]\n    (let [account-index (.indexOf (:accounts user) account)]\n      (assoc user (assoc (:accounts user) account-index updated-account)))))&quot;, :offset 264, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ user account new-transactions]\n  (let [updated-account (assoc account :transactions new-transactions)]\n    (let [account-index (.indexOf (:accounts user) account)]\n      (conj user (assoc (:accounts user) account-index updated-account)))))&quot;, :offset 263, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ user account new-transactions]\n  (let [updated-account (assoc account :transactions new-transactions)]\n    (let [account-index (.indexOf (:accounts user) account)]\n      (conj user (:accounts (assoc (:accounts user) account-index updated-account))))))&quot;, :offset 275, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ user account new-transactions]\n  (let [updated-account (assoc account :transactions new-transactions)]\n    (let [account-index (.indexOf (:accounts user) account)]\n      (assoc (:accounts user) account-index updated-account))))&quot;, :offset 251, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ user account new-transactions]\n  (let [updated-account (assoc account :transactions new-transactions)]\n    (let [account-index (.indexOf (:accounts user) account)]\n      (assoc user (:accounts (assoc (:accounts user) account-index updated-account))))))&quot;, :offset 276, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ user account new-transactions]\n  (let [updated-account (assoc account :transactions new-transactions)]\n    (let [account-index (.indexOf (:accounts user) account)]\n      (merge user (:accounts (assoc (:accounts user) account-index updated-account))))))&quot;, :offset 276, :ns &quot;b.core&quot;} {:command &quot;(defn refresh-account [ user account new-transactions]\n  (let [updated-account (assoc account :transactions new-transactions)]\n    (let [account-index (.indexOf (:accounts user) account)]\n      (assoc (db) (.indexOf (db) user) (merge user (:accounts (assoc (:accounts user) account-index updated-account)))))))&quot;, :offset 310, :ns &quot;b.core&quot;} {:command &quot;(defn write-in-db [data]\n  (spit \&quot;src/accounts.json\&quot; (json/write-str data)))&quot;, :offset 76, :ns &quot;b.core&quot;} {:command &quot;(defn write-in-db [data]\n  (print data \&quot;aaasdasdads\&quot;)\n  (spit \&quot;src/accounts.json\&quot; (json/write-str data)))&quot;, :offset 105, :ns &quot;b.core&quot;} {:command &quot;(defn transact [inputs action]\n  (let [valid-user (is-valid-account inputs)]\n    (case (:action action)\n      \&quot;credit-in-saving\&quot; (do\n                           (let [new-balance (credit (last-transaction (transactions (saving-account valid-user))) (:amount action))]\n                             (let [new-transaction (new-transaction (:amount action) \&quot;credit\&quot; new-balance)]\n                               (let [merge-transactions (merge-transactions (transactions (saving-account valid-user)) new-transaction)]\n                                 (let [updated-user-account (refresh-account valid-user (saving-account valid-user) merge-transactions)]\n                                   (write-in-db updated-user-account))))))\n      \&quot;debit-in-saving\&quot; (debit  (last-transaction (saving-account valid-user)) (:amount action))\n      \&quot;credit-in-current\&quot; (credit (last-transaction (current-account valid-user)) (:amount action))\n      \&quot;debit-in-current\&quot; (debit (last-transaction (current-account valid-user)) (:amount action)))))&quot;, :offset 1021, :ns &quot;b.core&quot;} {:command &quot;(transact {:username \&quot;kanishk\&quot; :password \&quot;123\&quot;} {:action \&quot;credit-in-saving\&quot; :amount 12})&quot;, :offset 88, :ns &quot;b.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL for b">
    <configuration name="REPL for b" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="b" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="b" />
      <setting name="path" value="$PROJECT_DIR$/src/b/core.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/b" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for b" />
        <item itemvalue="Clojure Application.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="115e7ba0-a16b-4688-bf9d-b9c5729cf93b" name="Default Changelist" comment="" />
      <created>1562928984522</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1562928984522</updated>
      <workItem from="1562928991233" duration="1702000" />
      <workItem from="1562956109680" duration="2651000" />
      <workItem from="1563078580651" duration="11040000" />
      <workItem from="1563208692746" duration="4888000" />
      <workItem from="1563297135957" duration="5682000" />
      <workItem from="1563384627713" duration="3375000" />
      <workItem from="1563472550049" duration="4151000" />
      <workItem from="1563703349808" duration="13761000" />
      <workItem from="1563986029442" duration="5380000" />
    </task>
    <task id="LOCAL-00001" summary="Buggy Code">
      <created>1563722679373</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1563722679373</updated>
    </task>
    <option name="localTasksCounter" value="2" />
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="52630000" />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="0" width="1680" height="1050" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" internal_type="SLIDING" order="0" type="SLIDING" weight="0.13882063" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32960895" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Docker" order="7" show_stripe_button="false" />
      <window_info anchor="bottom" id="Version Control" order="8" />
      <window_info anchor="bottom" id="Database Changes" order="9" />
      <window_info anchor="bottom" id="Terminal" order="10" />
      <window_info anchor="bottom" id="Event Log" order="11" side_tool="true" />
      <window_info anchor="bottom" x="819" y="70" width="632" height="980" id="REPL" order="12" sideWeight="0.84795916" visible="true" weight="0.30280957" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.24969475" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" weight="0.32967034" />
      <window_info anchor="right" x="618" y="450" width="444" height="149" id="Leiningen" order="5" sideWeight="0.15204081" type="FLOATING" weight="0.27106228" />
      <window_info anchor="right" id="Database" order="6" weight="0.32967034" />
      <window_info anchor="right" id="Palette&#9;" order="7" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Buggy Code" />
    <option name="LAST_COMMIT_MESSAGE" value="Buggy Code" />
  </component>
  <component name="antWorkspaceConfiguration">
    <option name="IS_AUTOSCROLL_TO_SOURCE" value="false" />
    <option name="FILTER_TARGETS" value="false" />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/accounts.json" />
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="240">
          <caret line="12" column="1" selection-start-line="12" selection-start-column="1" selection-end-line="12" selection-end-column="1" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/resources/users.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="240">
          <caret line="12" column="17" selection-start-line="12" selection-start-column="17" selection-end-line="12" selection-end-column="17" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="120">
          <caret line="6" column="48" selection-start-line="6" selection-start-column="48" selection-end-line="6" selection-end-column="48" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/b/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="190">
          <caret line="47" column="71" lean-forward="true" selection-start-line="47" selection-start-column="71" selection-end-line="47" selection-end-column="71" />
        </state>
      </provider>
    </entry>
  </component>
</project>